
 --> terraform init -- It will intialize the all needed prerequists for aws cloud provider
 --> terraform fmt -- it will arrange the all code in correct format or correct syntax
 --> terraform validate -- it will validates the configuration files in a directory
 --> terraform plan -- it shows the execution plan of the infrastructure, it can also preview all the changes
 --> terraform apply -- it will create the actual infrastructure

--> terraform init -- it will generate .terraform folder and .terraform.lock.hcl file also

--> terraform apply generates terraform.tfstate file and terraform.tfstate.backup

terraform
-------------
argument= whatever we will give within the blocks 

output.tf = To print the created resource output data

diff b/w argument and attribute
-----------------------------
inputs which are given in block ---argument --- inputs

we will give which are to be printed as output-- attribute-- outputs

variable.tf
---------------
we declare values which are to be going to insert in argument
variables declaration

tfvars (we will pass original values for variables here)
--------
it contains values of variables

main.tf
---------
it contains cloud provider details and region details


--> Terraform by default will take only terraform files

--> if u want give values through tfvars file then u mention manually

 ex:- terraform apply -var-file=dev.tfvars


if u want to take automatically, then save filename with auto.tfvars 

 ex:- auto.tfvars

Datasource (to read and create)
-----------

it is used to take id of already created resource

suppose:- if u create 10 ec2 , u want only ec2's with specific ami -- at that time filter with datasource
  

module (total code contains resource.tf,main.tf,variable.tf,output.tf,tfvars)
-----------
--> terraform module is a set of configuration files in a single directory
--> Even a simple configuration consisiting of a single directory with one or more .tf files is called module.
 
it is used to reuse of the entire code, by changing the tfvars file values
--> terraform module allows you to group resources together, and then we can reuse that group resources for many times.


terraform tfstate file 
-------------------------
 “terraform.tfstate”. This state file contains information about the provisioned infrastructure which terraform manage. Whenever we change the configuration file,
 it automatically determines which part of your configuration is already created and which needs to be changed with help of state file. 


Run terraform commands through Jenkins pipeline
----------------------------------------------------------
-- first install terraform on jenkins 
-- change permissions 777 and add copy /usr/local/bin/
-- test the terraform --------  terraform --version

pipeline
---------

pipeline {
    agent any

    stages {
        stage('Git_checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/balu1391/terra-module.git'
            }
        }
        stage('initialize') {
            steps {
		        sh 'terraform init -verify-plugins=false' 
            }
        }
        stage('plan') {
            steps {
		        sh 'terraform plan'
            }
        }
        //stage('apply') {
        //    steps {
		//        sh 'terraform apply -auto-approve'
        //   }
        //}
        stage('destroy') {
            steps {
		        sh 'terraform destroy -auto-approve'
            }
        }   
    }
}


terraform module concept
--------------------------
module.tf -- if u run --- resources will be created

module "ec2_instance" {
  source = "../terra-practice/"     

  region = "ap-northeast-1"
  ami    = "ami-04204a8960917fd92"
  itype  = "t3.micro"
  zone   = "ap-northeast-1a"
  name   = "dev"
}

-- In source give the Actual code location

-- The tfvars file details will be changed in module concept

-- region = "ap-northeast-1"
  ami    = "ami-04204a8960917fd92"
  itype  = "t3.micro"
  zone   = "ap-northeast-1a"
  name   = "dev"
  
  these details we will pass on module.tf file or we can pass in separate file
  
  
  
  terraform Datasource concept
  ----------------------------
  
  -- By using Datasource we can get the data of resources which are already created before 
  
  -- we can get the already created resource data
   
  ex:- Not exact 
  
  data "aws_instance" "foo" {
  instance_id = "i-instanceid"

  filter {
    name   = "image-id"
    values = ["ami-xxxxxxxx"]
  }

  filter {
    name   = "tag:Name"
    values = ["instance-name-tag"]
  }
}
  
---- by using instance id, tag , like that we can filter the data 
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  




